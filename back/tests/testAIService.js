// üìÅ Fichier : /back/tests/testAIService.js

require('dotenv').config(); // Charger les variables d'environnement
const aiService = require('../services/aiService');

// Textes d'exemple pour les tests
const sampleTexts = {
  short: "L'intelligence artificielle est une technologie r√©volutionnaire. Elle transforme notre fa√ßon de travailler et de vivre. Les applications sont nombreuses dans tous les secteurs.",
  
  medium: `L'intelligence artificielle (IA) d√©signe l'ensemble des th√©ories et des techniques mises en ≈ìuvre en vue de r√©aliser des machines capables de simuler l'intelligence humaine. Elle est devenue l'une des technologies les plus importantes du 21e si√®cle. 

L'IA se divise en plusieurs branches : l'apprentissage automatique (machine learning), le traitement du langage naturel, la vision par ordinateur, et la robotique. Chaque domaine a ses propres applications et d√©fis.

Les entreprises investissent massivement dans cette technologie pour automatiser leurs processus, am√©liorer leur efficacit√© et cr√©er de nouveaux services. Cependant, l'IA soul√®ve aussi des questions √©thiques importantes concernant l'emploi, la vie priv√©e et la prise de d√©cision automatis√©e.

L'avenir de l'IA promet des avanc√©es spectaculaires, mais n√©cessite une r√©flexion approfondie sur son impact soci√©tal.`,

  long: `L'intelligence artificielle (IA) repr√©sente l'un des domaines technologiques les plus fascinants et les plus prometteurs de notre √©poque. D√©finie comme la capacit√© des machines √† imiter l'intelligence humaine, l'IA englobe un vaste ensemble de techniques et d'approches qui visent √† cr√©er des syst√®mes capables de raisonner, d'apprendre et de prendre des d√©cisions de mani√®re autonome.

Les origines de l'intelligence artificielle remontent aux ann√©es 1940-1950, avec les travaux pionniers d'Alan Turing, qui a propos√© le c√©l√®bre "test de Turing" pour √©valuer la capacit√© d'une machine √† exhiber un comportement intelligent √©quivalent √† celui d'un √™tre humain. Depuis lors, le domaine a connu plusieurs p√©riodes d'enthousiasme et de d√©sillusion, appel√©es "hivers de l'IA".

Aujourd'hui, gr√¢ce aux avanc√©es en informatique, √† l'augmentation de la puissance de calcul et √† la disponibilit√© de grandes quantit√©s de donn√©es, l'IA conna√Æt un renouveau spectaculaire. Les algorithmes d'apprentissage automatique, et en particulier l'apprentissage profond (deep learning), ont r√©volutionn√© notre capacit√© √† r√©soudre des probl√®mes complexes dans de nombreux domaines.

Les applications de l'IA sont d√©sormais omnipr√©sentes : reconnaissance vocale et faciale, traduction automatique, v√©hicules autonomes, diagnostic m√©dical assist√©, recommandations personnalis√©es, jeux vid√©o, finance algorithmique, et bien d'autres. Chaque secteur d'activit√© trouve des moyens d'exploiter cette technologie pour am√©liorer ses performances et cr√©er de la valeur.

Cependant, le d√©veloppement rapide de l'IA soul√®ve √©galement des d√©fis importants. Les questions d'√©thique, de transparence des algorithmes, de protection de la vie priv√©e, d'impact sur l'emploi et de gouvernance technologique sont au c≈ìur des d√©bats contemporains. Il est crucial de d√©velopper une IA responsable qui b√©n√©ficie √† l'ensemble de la soci√©t√© tout en minimisant les risques potentiels.`
};

/**
 * Fonction utilitaire pour afficher les r√©sultats de test
 */
function displayTestResult(testName, result, startTime) {
  const duration = Date.now() - startTime;
  console.log('\n' + '='.repeat(60));
  console.log(`üß™ TEST: ${testName}`);
  console.log(`‚è±Ô∏è  Dur√©e: ${duration}ms`);
  console.log('üìÑ R√©sultat:');
  console.log(result);
  console.log('='.repeat(60));
}

/**
 * Test 1: V√©rification de l'√©tat de l'API
 */
async function testAPIHealth() {
  console.log('üîç Test de l\'√©tat de l\'API Hugging Face...');
  const startTime = Date.now();
  
  try {
    const isHealthy = await aiService.checkAPIHealth();
    displayTestResult('API Health Check', 
      isHealthy ? '‚úÖ API fonctionnelle' : '‚ùå API non disponible', 
      startTime
    );
    return isHealthy;
  } catch (error) {
    displayTestResult('API Health Check', `‚ùå Erreur: ${error.message}`, startTime);
    return false;
  }
}

/**
 * Test 2: R√©sum√© avec texte court
 */
async function testShortSummary() {
  console.log('üìù Test r√©sum√© texte court...');
  const startTime = Date.now();
  
  try {
    const summary = await aiService.generateSummary(sampleTexts.short, 50);
    displayTestResult('R√©sum√© Texte Court', summary, startTime);
  } catch (error) {
    displayTestResult('R√©sum√© Texte Court', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 3: R√©sum√© avec texte moyen
 */
async function testMediumSummary() {
  console.log('üìù Test r√©sum√© texte moyen...');
  const startTime = Date.now();
  
  try {
    const summary = await aiService.generateSummary(sampleTexts.medium, 100);
    displayTestResult('R√©sum√© Texte Moyen', summary, startTime);
  } catch (error) {
    displayTestResult('R√©sum√© Texte Moyen', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 4: R√©sum√© avec texte long
 */
async function testLongSummary() {
  console.log('üìù Test r√©sum√© texte long...');
  const startTime = Date.now();
  
  try {
    const summary = await aiService.generateSummary(sampleTexts.long, 150);
    displayTestResult('R√©sum√© Texte Long', summary, startTime);
  } catch (error) {
    displayTestResult('R√©sum√© Texte Long', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 5: Extraction de mots-cl√©s
 */
async function testKeywordExtraction() {
  console.log('üîë Test extraction mots-cl√©s...');
  const startTime = Date.now();
  
  try {
    const keywords = aiService.extractKeywords(sampleTexts.medium, 8);
    displayTestResult('Extraction Mots-cl√©s', 
      `Mots-cl√©s trouv√©s: ${keywords.join(', ')}`, 
      startTime
    );
  } catch (error) {
    displayTestResult('Extraction Mots-cl√©s', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 6: Test de fallback (r√©sum√© simple)
 */
async function testFallbackSummary() {
  console.log('üîÑ Test fallback r√©sum√© simple...');
  const startTime = Date.now();
  
  try {
    const summary = aiService.generateSimpleSummary(sampleTexts.medium, 3);
    displayTestResult('Fallback R√©sum√© Simple', summary, startTime);
  } catch (error) {
    displayTestResult('Fallback R√©sum√© Simple', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 7: Gestion d'erreurs (texte vide)
 */
async function testErrorHandling() {
  console.log('‚ö†Ô∏è  Test gestion d\'erreurs...');
  const startTime = Date.now();
  
  try {
    const summary = await aiService.generateSummary('', 100);
    displayTestResult('Gestion Erreurs (texte vide)', summary, startTime);
  } catch (error) {
    displayTestResult('Gestion Erreurs (texte vide)', `‚ùå Erreur: ${error.message}`, startTime);
  }
}

/**
 * Test 8: Performance avec diff√©rentes tailles
 */
async function testPerformance() {
  console.log('‚ö° Test performance...');
  
  const tests = [
    { name: 'Court (200 chars)', text: sampleTexts.short },
    { name: 'Moyen (800 chars)', text: sampleTexts.medium },
    { name: 'Long (2000+ chars)', text: sampleTexts.long }
  ];
  
  for (const test of tests) {
    const startTime = Date.now();
    try {
      await aiService.generateSummary(test.text, 100);
      const duration = Date.now() - startTime;
      console.log(`üìä ${test.name}: ${duration}ms`);
    } catch (error) {
      console.log(`üìä ${test.name}: ‚ùå ${error.message}`);
    }
  }
}

/**
 * Suite de tests compl√®te
 */
async function runAllTests() {
  console.log('üöÄ D√âBUT DES TESTS AISERVICE');
  console.log('üïê ' + new Date().toLocaleString());
  
  // V√©rifier les variables d'environnement
  console.log('\nüìã Configuration:');
  console.log(`HUGGINGFACE_API_KEY: ${process.env.HUGGINGFACE_API_KEY ? '‚úÖ D√©finie' : '‚ùå Manquante'}`);
  
  const startTime = Date.now();
  
  // Ex√©cuter tous les tests
  await testAPIHealth();
  await testShortSummary();
  await testMediumSummary();
  await testLongSummary();
  await testKeywordExtraction();
  await testFallbackSummary();
  await testErrorHandling();
  await testPerformance();
  
  const totalDuration = Date.now() - startTime;
  console.log('\nüèÅ TESTS TERMIN√âS');
  console.log(`‚è±Ô∏è  Dur√©e totale: ${totalDuration}ms`);
  console.log('üïê ' + new Date().toLocaleString());
}

/**
 * Test interactif simple
 */
async function testInteractive() {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  console.log('üí¨ Mode test interactif - Entrez votre texte:');
  
  rl.question('Texte √† r√©sumer: ', async (text) => {
    if (text.trim()) {
      console.log('\nü§ñ G√©n√©ration du r√©sum√©...');
      try {
        const summary = await aiService.generateSummary(text, 100);
        console.log('\nüìÑ R√©sum√©:');
        console.log(summary);
        
        const keywords = aiService.extractKeywords(text, 5);
        console.log('\nüîë Mots-cl√©s:', keywords.join(', '));
      } catch (error) {
        console.error('‚ùå Erreur:', error.message);
      }
    }
    rl.close();
  });
}

// Gestion des arguments de ligne de commande
const args = process.argv.slice(2);

if (args.includes('--interactive')) {
  testInteractive();
} else if (args.includes('--health')) {
  testAPIHealth();
} else if (args.includes('--performance')) {
  testPerformance();
} else {
  runAllTests();
}

// Export pour utilisation dans d'autres tests
module.exports = {
  testAPIHealth,
  testShortSummary,
  testMediumSummary,
  testLongSummary,
  testKeywordExtraction,
  testFallbackSummary,
  testErrorHandling,
  testPerformance,
  runAllTests,
  sampleTexts
};