// üìÅ Fichier : /back/services/aiService.js

const { HfInference } = require('@huggingface/inference');

class AIService {
  constructor() {
    if (!process.env.HUGGINGFACE_API_KEY) {
      console.warn('‚ö†Ô∏è HUGGINGFACE_API_KEY non d√©finie - fonctionnalit√©s IA limit√©es');
    }
    this.hf = new HfInference(process.env.HUGGINGFACE_API_KEY);

    this.models = {
      summarization: 'facebook/bart-large-cnn',
      summarizationFallback: 'sshleifer/distilbart-cnn-12-6',
    };

    // Configuration pour r√©sum√©s adaptatifs selon la longueur
    this.summaryConfig = {
      short: { maxLength: 80, minLength: 30, sentences: 2 },      // < 5000 chars
      medium: { maxLength: 150, minLength: 60, sentences: 4 },    // 5000-20000 chars
      long: { maxLength: 300, minLength: 120, sentences: 6 },     // 20000-50000 chars
      veryLong: { maxLength: 500, minLength: 200, sentences: 8 }  // > 50000 chars
    };
  }

  /**
   * D√©termine la configuration de r√©sum√© selon la longueur du texte
   */
  getSummaryConfigForLength(textLength) {
    if (textLength < 5000) return this.summaryConfig.short;
    if (textLength < 20000) return this.summaryConfig.medium;
    if (textLength < 50000) return this.summaryConfig.long;
    return this.summaryConfig.veryLong;
  }

  /**
   * D√©tecte la langue du texte (basique)
   */
  detectLanguage(text) {
    const sample = text.substring(0, 500).toLowerCase();
    
    // Mots courants par langue
    const languageMarkers = {
      fr: ['le', 'de', 'et', '√†', 'un', 'il', '√™tre', 'et', 'en', 'avoir', 'que', 'pour'],
      en: ['the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'i', 'it', 'for'],
      es: ['el', 'de', 'que', 'y', 'a', 'en', 'un', 'es', 'se', 'no', 'te', 'lo'],
      it: ['il', 'di', 'che', 'e', 'la', 'per', 'una', 'in', 'con', 'non', 'da', 'su']
    };

    let maxScore = 0;
    let detectedLang = 'fr'; // d√©faut fran√ßais

    for (const [lang, markers] of Object.entries(languageMarkers)) {
      const score = markers.reduce((acc, marker) => {
        const regex = new RegExp(`\\b${marker}\\b`, 'gi');
        return acc + (sample.match(regex) || []).length;
      }, 0);

      if (score > maxScore) {
        maxScore = score;
        detectedLang = lang;
      }
    }

    return detectedLang;
  }

  async generateSummary(text, customMaxLength = null) {
    try {
      console.log('ü§ñ G√©n√©ration du r√©sum√© adaptatif avec Hugging Face...');

      if (!text || typeof text !== 'string' || text.trim().length === 0) {
        throw new Error('Texte invalide pour le r√©sum√©');
      }

      // Configuration adaptative selon la longueur
      const config = this.getSummaryConfigForLength(text.length);
      const maxLength = customMaxLength || config.maxLength;
      
      console.log(`üìè Texte: ${text.length} chars - Config: ${JSON.stringify(config)}`);

      if (!process.env.HUGGINGFACE_API_KEY) {
        console.warn('‚ö†Ô∏è Cl√© API Hugging Face manquante, utilisation du r√©sum√© simple');
        return this.generateSimpleSummary(text, config.sentences);
      }

      const processedText = this.preprocessText(text);
      const detectedLang = this.detectLanguage(text);
      
      console.log(`üåç Langue d√©tect√©e: ${detectedLang}`);

      try {
        return await this.generateSummaryWithModel(processedText, maxLength, config.minLength, this.models.summarization);
      } catch (primaryError) {
        console.warn('‚ö†Ô∏è √âchec mod√®le principal, tentative avec mod√®le de secours:', primaryError.message);

        try {
          return await this.generateSummaryWithModel(processedText, maxLength, config.minLength, this.models.summarizationFallback);
        } catch (fallbackError) {
          console.warn('‚ö†Ô∏è √âchec mod√®le de secours, utilisation r√©sum√© simple:', fallbackError.message);
          return this.generateSimpleSummary(text, config.sentences);
        }
      }

    } catch (error) {
      console.error('‚ùå Erreur g√©n√©ration r√©sum√©:', error);
      const config = this.getSummaryConfigForLength(text.length);
      return this.generateSimpleSummary(text, config.sentences);
    }
  }

  async generateSummaryWithModel(text, maxLength, minLength, modelName) {
    const response = await this.hf.summarization({
      model: modelName,
      inputs: text,
      parameters: {
        max_length: Math.min(maxLength, 500),
        min_length: Math.max(minLength, 20),
        do_sample: false,
        early_stopping: true,
        length_penalty: 2.0,
        repetition_penalty: 1.2,
        no_repeat_ngram_size: 3
      }
    });

    const summary = response.summary_text || response.generated_text;

    if (!summary || summary.trim().length === 0) {
      throw new Error('R√©sum√© vide g√©n√©r√© par le mod√®le');
    }

    return this.postprocessSummary(summary, text);
  }

  preprocessText(text) {
    // Pr√©server les accents et caract√®res sp√©ciaux
    let cleaned = text
      .replace(/\s+/g, ' ')
      .replace(/[^\w\s.,;:!?()[\]"'\-√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß√±√°√≠√≥√∫√Ω√±√Ä√Ç√Ñ√â√à√ä√ã√è√é√î√ñ√ô√õ√ú≈∏√á√ë√Å√ç√ì√ö√ù]/g, '')
      .trim();

    // Longueur adaptative selon le mod√®le
    const maxChars = 4000;

    if (cleaned.length <= maxChars) {
      return cleaned;
    }

    const truncated = cleaned.substring(0, maxChars);
    
    // Chercher une coupure naturelle
    const sentenceEnders = ['.', '!', '?', '„ÄÇ', 'ÔºÅ', 'Ôºü']; // Support multilingue
    
    let bestCutPoint = -1;
    for (const ender of sentenceEnders) {
      const lastIndex = truncated.lastIndexOf(ender);
      if (lastIndex > bestCutPoint && lastIndex > maxChars * 0.7) {
        bestCutPoint = lastIndex;
      }
    }

    if (bestCutPoint > 0) {
      return truncated.substring(0, bestCutPoint + 1);
    }

    // Coupure sur un espace
    const lastSpace = truncated.lastIndexOf(' ');
    return lastSpace > maxChars * 0.8 ? truncated.substring(0, lastSpace) + '...' : truncated + '...';
  }

  postprocessSummary(summary, originalText) {
    let processed = summary
      .trim()
      .replace(/\s+/g, ' ')
      .replace(/([.!?])\s*([A-Z])/g, '$1 $2')
      .replace(/\.\s*$/, '.');

    // Validation anti-hallucination basique
    processed = this.validateSummaryContent(processed, originalText);

    return processed;
  }

  /**
   * Validation basique pour √©viter les hallucinations
   */
  validateSummaryContent(summary, originalText) {
    const summaryWords = summary.toLowerCase().split(/\s+/);
    const originalWords = new Set(originalText.toLowerCase().split(/\s+/));
    
    // Filtrer les mots qui n'existent pas dans le texte original (sauf mots tr√®s courants)
    const commonWords = new Set([
      'le', 'de', 'et', '√†', 'un', 'il', '√™tre', 'avoir', 'que', 'pour', 'dans', 'ce', 'son', 'sa', 'ses',
      'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'for', 'not', 'on', 'with',
      'est', 'sont', '√©tait', 'sera', 'fait', 'dit', 'peut', 'doit', 'tr√®s', 'plus', 'moins',
      'is', 'are', 'was', 'will', 'can', 'could', 'should', 'would', 'has', 'had', 'do', 'does'
    ]);

    const validWords = summaryWords.filter(word => 
      word.length <= 2 || 
      commonWords.has(word) || 
      originalWords.has(word) ||
      originalWords.has(word.replace(/s$/, '')) || // pluriel
      originalWords.has(word + 's') // singulier
    );

    // Si trop de mots invalides, retourner un r√©sum√© simple
    if (validWords.length < summaryWords.length * 0.7) {
      console.warn('‚ö†Ô∏è R√©sum√© potentiellement hallucin√©, utilisation du r√©sum√© simple');
      const config = this.getSummaryConfigForLength(originalText.length);
      return this.generateSimpleSummary(originalText, config.sentences);
    }

    return summary;
  }

  generateSimpleSummary(text, sentenceCount = 3) {
    try {
      console.log(`üìù G√©n√©ration r√©sum√© simple (${sentenceCount} phrases)...`);

      if (!text || text.trim().length === 0) {
        return 'Texte vide - impossible de g√©n√©rer un r√©sum√©.';
      }

      // Normaliser les terminaisons de phrases pour diff√©rentes langues
      const sentences = text
        .split(/[.!?„ÄÇÔºÅÔºü]+/)
        .map(s => s.trim())
        .filter(s => s.length > 20 && s.split(' ').length > 4) // Phrases plus substantielles
        .slice(0, Math.min(30, sentenceCount * 6)); // Plus d'options

      if (sentences.length === 0) {
        return `Document de ${Math.ceil(text.length / 1000)}k caract√®res. Contenu disponible pour lecture compl√®te.`;
      }

      const selectedSentences = [];

      if (sentences.length >= sentenceCount) {
        // Premi√®re phrase (introduction)
        selectedSentences.push(sentences[0]);

        // R√©partir les autres phrases
        if (sentenceCount > 1) {
          const step = Math.floor(sentences.length / sentenceCount);
          for (let i = 1; i < sentenceCount && i * step < sentences.length; i++) {
            const index = Math.min(i * step, sentences.length - 1);
            if (!selectedSentences.includes(sentences[index])) {
              selectedSentences.push(sentences[index]);
            }
          }
        }
      } else {
        selectedSentences.push(...sentences);
      }

      const summary = selectedSentences.join('. ').replace(/\.\s*\./g, '.') + '.';

      if (summary.length < 50) {
        return `R√©sum√© automatique : Document de ${Math.ceil(text.length / 1000)}k caract√®res contenant du contenu textuel. Lecture compl√®te recommand√©e pour plus de d√©tails.`;
      }

      return summary;

    } catch (error) {
      console.error('‚ùå Erreur r√©sum√© simple:', error);
      return 'R√©sum√© indisponible. Document pr√™t pour la lecture.';
    }
  }

  extractKeywords(text, maxKeywords = 8) {
    try {
      // Mots vides multilingues
      const stopWords = new Set([
        // Fran√ßais
        'le', 'de', 'un', '√†', '√™tre', 'et', 'en', 'avoir', 'que', 'pour',
        'dans', 'ce', 'il', 'une', 'sur', 'avec', 'ne', 'se', 'pas', 'tout',
        'plus', 'par', 'grand', 'ou', 'son', 'sa', 'ses', 'du', 'des', 'la',
        'les', 'au', 'aux', 'cette', 'ces', 'cet', 'mon', 'ma', 'mes', 'ton',
        'ta', 'tes', 'notre', 'nos', 'votre', 'vos', 'leur', 'leurs', 'qui',
        'quoi', 'dont', 'o√π', 'quand', 'comme', 'sans', 'sous', 'apr√®s',
        'avant', 'pendant', 'depuis', 'jusqu', 'vers', 'chez', 'entre',
        // Anglais
        'the', 'be', 'to', 'of', 'and', 'a', 'in', 'that', 'have', 'it', 'for',
        'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his',
        'by', 'from', 'they', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would',
        // Espagnol
        'el', 'de', 'que', 'y', 'a', 'en', 'un', 'es', 'se', 'no', 'te', 'lo',
        'le', 'da', 'su', 'por', 'son', 'con', 'para', 'una', 'tiene', 'las'
      ]);

      // Normaliser le texte en pr√©servant les accents
      const words = text
        .toLowerCase()
        .replace(/[^\w\s√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß√±√°√≠√≥√∫√Ω√±]/g, ' ')
        .split(/\s+/)
        .filter(word =>
          word.length > 3 &&
          !stopWords.has(word) &&
          !/^\d+$/.test(word) &&
          word.match(/[a-zA-Z√†√¢√§√©√®√™√´√Ø√Æ√¥√∂√π√ª√º√ø√ß√±√°√≠√≥√∫√Ω√±]/)
        );

      const wordCount = {};
      words.forEach(word => {
        wordCount[word] = (wordCount[word] || 0) + 1;
      });

      // Score pond√©r√© par fr√©quence et longueur
      const weightedWords = Object.entries(wordCount)
        .map(([word, count]) => ({
          word,
          score: count * Math.log(word.length + 1) * (word.length > 5 ? 1.2 : 1)
        }))
        .sort((a, b) => b.score - a.score)
        .slice(0, maxKeywords)
        .map(({ word }) => word);

      return weightedWords;

    } catch (error) {
      console.error('‚ùå Erreur extraction mots-cl√©s:', error);
      return [];
    }
  }

  async analyzeSentiment(text) {
    try {
      // Analyse de sentiment basique (peut √™tre √©tendue avec une API)
      const positiveWords = ['bon', 'bien', 'excellent', 'magnifique', 'parfait', 'super', 'g√©nial', 'formidable'];
      const negativeWords = ['mauvais', 'mal', 'terrible', 'horrible', 'nul', 'catastrophique', 'affreux'];
      
      const words = text.toLowerCase().split(/\s+/);
      let positiveCount = 0;
      let negativeCount = 0;
      
      words.forEach(word => {
        if (positiveWords.some(pw => word.includes(pw))) positiveCount++;
        if (negativeWords.some(nw => word.includes(nw))) negativeCount++;
      });
      
      const total = positiveCount + negativeCount;
      if (total === 0) return { sentiment: 'neutral', confidence: 0.5 };
      
      const sentiment = positiveCount > negativeCount ? 'positive' : 'negative';
      const confidence = Math.max(positiveCount, negativeCount) / total;
      
      return { sentiment, confidence };
      
    } catch (error) {
      console.error('‚ùå Erreur analyse sentiment:', error);
      return { sentiment: 'neutral', confidence: 0.5 };
    }
  }

  async checkAPIHealth() {
    try {
      if (!process.env.HUGGINGFACE_API_KEY) {
        return false;
      }

      const testResponse = await this.hf.summarization({
        model: this.models.summarizationFallback,
        inputs: "This is a simple test to check if the API is working properly. The test should return a brief summary.",
        parameters: { max_length: 50, min_length: 10 }
      });

      return !!(testResponse && (testResponse.summary_text || testResponse.generated_text));
    } catch (error) {
      console.error('‚ùå API Hugging Face non disponible:', error.message);
      return false;
    }
  }
}

module.exports = new AIService();